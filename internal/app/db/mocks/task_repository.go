// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/clevertechware/todo-bun-app/internal/app/models"
	mock "github.com/stretchr/testify/mock"
)

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

type TaskRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskRepository) EXPECT() *TaskRepository_Expecter {
	return &TaskRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type TaskRepository
func (_mock *TaskRepository) Create(ctx context.Context, task *models.Task) error {
	ret := _mock.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Task) error); ok {
		r0 = returnFunc(ctx, task)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TaskRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - task *models.Task
func (_e *TaskRepository_Expecter) Create(ctx interface{}, task interface{}) *TaskRepository_Create_Call {
	return &TaskRepository_Create_Call{Call: _e.mock.On("Create", ctx, task)}
}

func (_c *TaskRepository_Create_Call) Run(run func(ctx context.Context, task *models.Task)) *TaskRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Task
		if args[1] != nil {
			arg1 = args[1].(*models.Task)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskRepository_Create_Call) Return(err error) *TaskRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepository_Create_Call) RunAndReturn(run func(ctx context.Context, task *models.Task) error) *TaskRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type TaskRepository
func (_mock *TaskRepository) Delete(ctx context.Context, taskID int64) error {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TaskRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID int64
func (_e *TaskRepository_Expecter) Delete(ctx interface{}, taskID interface{}) *TaskRepository_Delete_Call {
	return &TaskRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, taskID)}
}

func (_c *TaskRepository_Delete_Call) Run(run func(ctx context.Context, taskID int64)) *TaskRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskRepository_Delete_Call) Return(err error) *TaskRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, taskID int64) error) *TaskRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type TaskRepository
func (_mock *TaskRepository) GetByID(ctx context.Context, taskID int64) (*models.Task, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*models.Task, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *models.Task); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type TaskRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID int64
func (_e *TaskRepository_Expecter) GetByID(ctx interface{}, taskID interface{}) *TaskRepository_GetByID_Call {
	return &TaskRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, taskID)}
}

func (_c *TaskRepository_GetByID_Call) Run(run func(ctx context.Context, taskID int64)) *TaskRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskRepository_GetByID_Call) Return(task *models.Task, err error) *TaskRepository_GetByID_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *TaskRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, taskID int64) (*models.Task, error)) *TaskRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type TaskRepository
func (_mock *TaskRepository) List(ctx context.Context) ([]*models.Task, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*models.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*models.Task, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*models.Task); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type TaskRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TaskRepository_Expecter) List(ctx interface{}) *TaskRepository_List_Call {
	return &TaskRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *TaskRepository_List_Call) Run(run func(ctx context.Context)) *TaskRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TaskRepository_List_Call) Return(tasks []*models.Task, err error) *TaskRepository_List_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *TaskRepository_List_Call) RunAndReturn(run func(ctx context.Context) ([]*models.Task, error)) *TaskRepository_List_Call {
	_c.Call.Return(run)
	return _c
}
