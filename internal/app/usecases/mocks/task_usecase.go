// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/clevertechware/todo-bun-app/internal/app/usecases"
	mock "github.com/stretchr/testify/mock"
)

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

type TaskUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskUsecase) EXPECT() *TaskUsecase_Expecter {
	return &TaskUsecase_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function for the type TaskUsecase
func (_mock *TaskUsecase) CreateTask(ctx context.Context, params usecases.CreateTaskParams) (*usecases.TaskResult, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *usecases.TaskResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, usecases.CreateTaskParams) (*usecases.TaskResult, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, usecases.CreateTaskParams) *usecases.TaskResult); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecases.TaskResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, usecases.CreateTaskParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecase_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type TaskUsecase_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - params usecases.CreateTaskParams
func (_e *TaskUsecase_Expecter) CreateTask(ctx interface{}, params interface{}) *TaskUsecase_CreateTask_Call {
	return &TaskUsecase_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, params)}
}

func (_c *TaskUsecase_CreateTask_Call) Run(run func(ctx context.Context, params usecases.CreateTaskParams)) *TaskUsecase_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 usecases.CreateTaskParams
		if args[1] != nil {
			arg1 = args[1].(usecases.CreateTaskParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskUsecase_CreateTask_Call) Return(taskResult *usecases.TaskResult, err error) *TaskUsecase_CreateTask_Call {
	_c.Call.Return(taskResult, err)
	return _c
}

func (_c *TaskUsecase_CreateTask_Call) RunAndReturn(run func(ctx context.Context, params usecases.CreateTaskParams) (*usecases.TaskResult, error)) *TaskUsecase_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function for the type TaskUsecase
func (_mock *TaskUsecase) DeleteTask(ctx context.Context, taskID int64) error {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskUsecase_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type TaskUsecase_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID int64
func (_e *TaskUsecase_Expecter) DeleteTask(ctx interface{}, taskID interface{}) *TaskUsecase_DeleteTask_Call {
	return &TaskUsecase_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, taskID)}
}

func (_c *TaskUsecase_DeleteTask_Call) Run(run func(ctx context.Context, taskID int64)) *TaskUsecase_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskUsecase_DeleteTask_Call) Return(err error) *TaskUsecase_DeleteTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskUsecase_DeleteTask_Call) RunAndReturn(run func(ctx context.Context, taskID int64) error) *TaskUsecase_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function for the type TaskUsecase
func (_mock *TaskUsecase) GetTask(ctx context.Context, taskID int64) (*usecases.TaskResult, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *usecases.TaskResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*usecases.TaskResult, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *usecases.TaskResult); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecases.TaskResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecase_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type TaskUsecase_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID int64
func (_e *TaskUsecase_Expecter) GetTask(ctx interface{}, taskID interface{}) *TaskUsecase_GetTask_Call {
	return &TaskUsecase_GetTask_Call{Call: _e.mock.On("GetTask", ctx, taskID)}
}

func (_c *TaskUsecase_GetTask_Call) Run(run func(ctx context.Context, taskID int64)) *TaskUsecase_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TaskUsecase_GetTask_Call) Return(taskResult *usecases.TaskResult, err error) *TaskUsecase_GetTask_Call {
	_c.Call.Return(taskResult, err)
	return _c
}

func (_c *TaskUsecase_GetTask_Call) RunAndReturn(run func(ctx context.Context, taskID int64) (*usecases.TaskResult, error)) *TaskUsecase_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// ListTasks provides a mock function for the type TaskUsecase
func (_mock *TaskUsecase) ListTasks(ctx context.Context) (*usecases.TaskListResult, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *usecases.TaskListResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*usecases.TaskListResult, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *usecases.TaskListResult); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecases.TaskListResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TaskUsecase_ListTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTasks'
type TaskUsecase_ListTasks_Call struct {
	*mock.Call
}

// ListTasks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TaskUsecase_Expecter) ListTasks(ctx interface{}) *TaskUsecase_ListTasks_Call {
	return &TaskUsecase_ListTasks_Call{Call: _e.mock.On("ListTasks", ctx)}
}

func (_c *TaskUsecase_ListTasks_Call) Run(run func(ctx context.Context)) *TaskUsecase_ListTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *TaskUsecase_ListTasks_Call) Return(taskListResult *usecases.TaskListResult, err error) *TaskUsecase_ListTasks_Call {
	_c.Call.Return(taskListResult, err)
	return _c
}

func (_c *TaskUsecase_ListTasks_Call) RunAndReturn(run func(ctx context.Context) (*usecases.TaskListResult, error)) *TaskUsecase_ListTasks_Call {
	_c.Call.Return(run)
	return _c
}
